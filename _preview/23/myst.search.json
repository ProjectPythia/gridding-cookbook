{"version":"1","records":[{"hierarchy":{"lvl1":"(re)Gridding with xarray Cookbook"},"type":"lvl1","url":"/","position":0},{"hierarchy":{"lvl1":"(re)Gridding with xarray Cookbook"},"content":"","type":"content","url":"/","position":1},{"hierarchy":{"lvl1":"(re)Gridding with xarray Cookbook"},"type":"lvl1","url":"/#id-re-gridding-with-xarray-cookbook","position":2},{"hierarchy":{"lvl1":"(re)Gridding with xarray Cookbook"},"content":"\n\n\n\n\n\n\n\nThis small cookbook will introduce three python packages that grids and re-grids data, that can interface with the xarray ecosystem. This is a common workflow, as modeling (climate, ML, etc.) outputs might not be all on the same scale or same grid.","type":"content","url":"/#id-re-gridding-with-xarray-cookbook","position":3},{"hierarchy":{"lvl1":"(re)Gridding with xarray Cookbook","lvl2":"Motivation"},"type":"lvl2","url":"/#motivation","position":4},{"hierarchy":{"lvl1":"(re)Gridding with xarray Cookbook","lvl2":"Motivation"},"content":"Quick repo to check out a few different gridding packages within short notebooks.\n\nPackages:\n\nVerde\n\nxESMF\n\npyresample\n\nPangeo thread covering an (no package) alternative to xESMF: \n\nhttps://​discourse​.pangeo​.io​/t​/conservative​-region​-aggregation​-with​-xarray​-geopandas​-and​-sparse​/2715\n\nGio is a neat package for importing some subsurface formats into xarray datasets. This will not be covered in this cookbook, as it is a file converter than a (re)gridder.","type":"content","url":"/#motivation","position":5},{"hierarchy":{"lvl1":"(re)Gridding with xarray Cookbook","lvl2":"Authors"},"type":"lvl2","url":"/#authors","position":6},{"hierarchy":{"lvl1":"(re)Gridding with xarray Cookbook","lvl2":"Authors"},"content":"Thomas Martin","type":"content","url":"/#authors","position":7},{"hierarchy":{"lvl1":"(re)Gridding with xarray Cookbook","lvl3":"Contributors","lvl2":"Authors"},"type":"lvl3","url":"/#contributors","position":8},{"hierarchy":{"lvl1":"(re)Gridding with xarray Cookbook","lvl3":"Contributors","lvl2":"Authors"},"content":"","type":"content","url":"/#contributors","position":9},{"hierarchy":{"lvl1":"(re)Gridding with xarray Cookbook","lvl2":"Structure"},"type":"lvl2","url":"/#structure","position":10},{"hierarchy":{"lvl1":"(re)Gridding with xarray Cookbook","lvl2":"Structure"},"content":"There are three notebooks, each one stands on there own, but reccomend doing them in the order below:\n\nxESMF\n\nVerde\n\npyresample","type":"content","url":"/#structure","position":11},{"hierarchy":{"lvl1":"How to Cite This Cookbook"},"type":"lvl1","url":"/notebooks/how-to-cite","position":0},{"hierarchy":{"lvl1":"How to Cite This Cookbook"},"content":"The material in this Project Pythia Cookbook is licensed for free and open consumption and reuse. All code is served under \n\nApache 2.0, while all non-code content is licensed under \n\nCreative Commons BY 4.0 (CC BY 4.0). Effectively, this means you are free to share and adapt this material so long as you give appropriate credit to the Cookbook authors and the Project Pythia community.\n\nThe source code for the book is \n\nreleased on GitHub and archived on Zenodo. This DOI will always resolve to the latest release of the book source:\n\n","type":"content","url":"/notebooks/how-to-cite","position":1},{"hierarchy":{"lvl1":"Introduction to Pyresample"},"type":"lvl1","url":"/notebooks/pyresample-intro","position":0},{"hierarchy":{"lvl1":"Introduction to Pyresample"},"content":"https://​pyresample​.readthedocs​.io​/en​/latest/\n\nThis package seems a bit more speciallized, and does not have as tight of integration with xarray like xESMF and Verde do. If working with satellite or swath data, this is not one to miss! This package integrates with Satpy \n\nhttps://​satpy​.readthedocs​.io​/en​/stable/ .\n\n","type":"content","url":"/notebooks/pyresample-intro","position":1},{"hierarchy":{"lvl1":"Introduction to Pyresample","lvl5":"(more) Integration with xarray"},"type":"lvl5","url":"/notebooks/pyresample-intro#id-more-integration-with-xarray","position":2},{"hierarchy":{"lvl1":"Introduction to Pyresample","lvl5":"(more) Integration with xarray"},"content":"\n\nThis is on the to-do list: \n\nhttps://​pyresample​.readthedocs​.io​/en​/latest​/roadmap​.html​?highlight​=​xarray​#xarray​-and​-geoxarray\n\n","type":"content","url":"/notebooks/pyresample-intro#id-more-integration-with-xarray","position":3},{"hierarchy":{"lvl1":"Introduction to Pyresample","lvl4":"Prerequisites"},"type":"lvl4","url":"/notebooks/pyresample-intro#prerequisites","position":4},{"hierarchy":{"lvl1":"Introduction to Pyresample","lvl4":"Prerequisites"},"content":"\n\nKnowing your way around xarray, numpy is beneficial. This is not deisgned to be an introduction to any of those packages. Would do this notebook after doing the xESMF one!\n\n","type":"content","url":"/notebooks/pyresample-intro#prerequisites","position":5},{"hierarchy":{"lvl1":"Introduction to Pyresample","lvl2":"Imports"},"type":"lvl2","url":"/notebooks/pyresample-intro#imports","position":6},{"hierarchy":{"lvl1":"Introduction to Pyresample","lvl2":"Imports"},"content":"\n\nimport pandas as pd\nimport numpy as np\nimport xarray as xr\n\nimport matplotlib.pyplot as plt\n\nfrom appdirs import *\n\nimport dask.array as da\n\nimport pyresample\nfrom pyresample import image, geometry\nfrom pyresample.bilinear import NumpyBilinearResampler\n\nfrom xarray import DataArray\nfrom pyresample.bilinear import XArrayBilinearResampler\n\nimport os\n\n%load_ext watermark\n%watermark --iversions\n\n","type":"content","url":"/notebooks/pyresample-intro#imports","position":7},{"hierarchy":{"lvl1":"Introduction to Pyresample","lvl2":"Loading in one netCDF"},"type":"lvl2","url":"/notebooks/pyresample-intro#loading-in-one-netcdf","position":8},{"hierarchy":{"lvl1":"Introduction to Pyresample","lvl2":"Loading in one netCDF"},"content":"\n\nfile = '../data/onestorm.nc'\n\nLet’s open this file with xarray:\n\nds = xr.open_dataset(file)\nds\n\nTrying to do the same thing with pyresample:\n\nfrom pyresample.utils import load_cf_area\n\narea_def, cf_info = load_cf_area('data/onestorm.nc', variable='visible', x='x', y='y')\n\nThis is supposed to fail. Will chat about pro’s and con’s in the summary.\n\n","type":"content","url":"/notebooks/pyresample-intro#loading-in-one-netcdf","position":9},{"hierarchy":{"lvl1":"Introduction to Pyresample","lvl2":"Resampling of gridded data using pyresample"},"type":"lvl2","url":"/notebooks/pyresample-intro#resampling-of-gridded-data-using-pyresample","position":10},{"hierarchy":{"lvl1":"Introduction to Pyresample","lvl2":"Resampling of gridded data using pyresample"},"content":"\n\nLink to this turtorial is here: \n\nhttps://​pyresample​.readthedocs​.io​/en​/latest​/swath​.html​#pyresample​-bilinear\n\nWe will be deconstructing it a bit to get into the details, but all of the code is from the above link.\n\ntarget_def = geometry.AreaDefinition('areaD',\n                                     'Europe (3km, HRV, VTC)',\n                                     'areaD',\n                                     {'a': '6378144.0', 'b': '6356759.0',\n                                      'lat_0': '50.00', 'lat_ts': '50.00',\n                                      'lon_0': '8.00', 'proj': 'stere'},\n                                     800, 800,\n                                     [-1370912.72, -909968.64,\n                                      1029087.28, 1490031.36])\n\nUnlike using xESMF, this does not depend or work with xarray:\n\nprint('target def type', type(target_def))\n\ndata = DataArray(da.from_array(np.fromfunction(lambda y, x: y*x, (500, 100))), dims=('y', 'x'))\ntype(data)\n\nlons = da.from_array(np.fromfunction(lambda y, x: 3 + x * 0.1, (500, 100)))\nlats = da.from_array(np.fromfunction(lambda y, x: 75 - y * 0.1, (500, 100)))\nsource_def = geometry.SwathDefinition(lons=lons, lats=lats)\n\nresampler = XArrayBilinearResampler(source_def, target_def, 30e3)\nresult = resampler.resample(data)\ntype(result)\n\n","type":"content","url":"/notebooks/pyresample-intro#resampling-of-gridded-data-using-pyresample","position":11},{"hierarchy":{"lvl1":"Introduction to Pyresample","lvl3":"Can export to xarray","lvl2":"Resampling of gridded data using pyresample"},"type":"lvl3","url":"/notebooks/pyresample-intro#can-export-to-xarray","position":12},{"hierarchy":{"lvl1":"Introduction to Pyresample","lvl3":"Can export to xarray","lvl2":"Resampling of gridded data using pyresample"},"content":"\n\nresult.to_dataset()\n\ndata.to_dataset()\n\n","type":"content","url":"/notebooks/pyresample-intro#can-export-to-xarray","position":13},{"hierarchy":{"lvl1":"Introduction to Pyresample","lvl4":"Summary","lvl3":"Can export to xarray","lvl2":"Resampling of gridded data using pyresample"},"type":"lvl4","url":"/notebooks/pyresample-intro#summary","position":14},{"hierarchy":{"lvl1":"Introduction to Pyresample","lvl4":"Summary","lvl3":"Can export to xarray","lvl2":"Resampling of gridded data using pyresample"},"content":"\n\nPyresample is a speciallist program, with strong functionality with satpy. Would reccomend if swath/sat image data is part of your normal workflow. For others, the requirement of the data being CF compliant and API is a hurdle.","type":"content","url":"/notebooks/pyresample-intro#summary","position":15},{"hierarchy":{"lvl1":"Introduction to Verde"},"type":"lvl1","url":"/notebooks/verde-intro","position":0},{"hierarchy":{"lvl1":"Introduction to Verde"},"content":"Unlike xESMF, verde is mainly designed around unstructured grids. Verde has a lot of great examples, we will use an atmospheric one below, but highly reccomend reading though the documents to get a better handle on the API.\n\nhttps://​www​.fatiando​.org​/verde​/latest/\n\n","type":"content","url":"/notebooks/verde-intro","position":1},{"hierarchy":{"lvl1":"Introduction to Verde","lvl4":"Prerequisites"},"type":"lvl4","url":"/notebooks/verde-intro#prerequisites","position":2},{"hierarchy":{"lvl1":"Introduction to Verde","lvl4":"Prerequisites"},"content":"\n\nKnowing your way around pandas, xarray, numpy and matplotlib is beneficial. This is not deisgned to be an introduction to any of those packages. We will be using Cartopy for some of the plots as well.\n\n","type":"content","url":"/notebooks/verde-intro#prerequisites","position":3},{"hierarchy":{"lvl1":"Introduction to Verde","lvl2":"Imports"},"type":"lvl2","url":"/notebooks/verde-intro#imports","position":4},{"hierarchy":{"lvl1":"Introduction to Verde","lvl2":"Imports"},"content":"\n\nimport pandas as pd\nimport numpy as np\nimport cartopy.crs as ccrs\nimport cartopy.feature as cf\n\nfrom appdirs import *\n\nimport verde as vd\n\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as mticker\n\n%load_ext watermark\n%watermark --iversions\n\ncolnames=['remove', 'lon', 'lat', 'date', 'sensor', 'PM25value', 'sensor_type'] \n\ndf = pd.read_csv('../data/airnow_data.csv', names=colnames, header=None)\ndf = df.drop(columns='remove')\ndf.head(3)\n\ndf.date = pd.to_datetime(df.date)\ndf.dtypes\n\nLet’s pick a time that has decent coverage:\n\ndf.date.value_counts().head()\n\ndf2 = df[df.date == '2022-09-06T07:00']\ndf2.head(3)\n\n","type":"content","url":"/notebooks/verde-intro#imports","position":5},{"hierarchy":{"lvl1":"Introduction to Verde","lvl3":"Plotting the data","lvl2":"Imports"},"type":"lvl3","url":"/notebooks/verde-intro#plotting-the-data","position":6},{"hierarchy":{"lvl1":"Introduction to Verde","lvl3":"Plotting the data","lvl2":"Imports"},"content":"\n\nplt.figure(figsize=(8, 5))\nax = plt.axes(projection=ccrs.PlateCarree())\nax.add_feature(cf.STATES)\n\ngl = ax.gridlines(crs=ccrs.PlateCarree(), draw_labels=True,\n                  linewidth=2, color='gray', alpha=0.35, linestyle='--')\n\ngl.xlabels_top = False\ngl.ylabels_right = False\n\ngl.xlocator = mticker.FixedLocator([-110, -108,  -106, -104, -102])\n\nplt.scatter(df2.lat, \n            df2.lon, \n            c = df2.PM25value,\n            s=50,\n            cmap=\"YlOrBr\")\n\nplt.colorbar().set_label(\"PM 2.5\")\nplt.show()\n\n","type":"content","url":"/notebooks/verde-intro#plotting-the-data","position":7},{"hierarchy":{"lvl1":"Introduction to Verde","lvl2":"Verde Workflows"},"type":"lvl2","url":"/notebooks/verde-intro#verde-workflows","position":8},{"hierarchy":{"lvl1":"Introduction to Verde","lvl2":"Verde Workflows"},"content":"\n\nSome of these workflows might not work super well from a scientific standpoint, this is just to show the mechanics of the verde package.\n\ncoordinates = (df2.lon, df2.lat)\n\n","type":"content","url":"/notebooks/verde-intro#verde-workflows","position":9},{"hierarchy":{"lvl1":"Introduction to Verde","lvl4":"Trend Estimation","lvl2":"Verde Workflows"},"type":"lvl4","url":"/notebooks/verde-intro#trend-estimation","position":10},{"hierarchy":{"lvl1":"Introduction to Verde","lvl4":"Trend Estimation","lvl2":"Verde Workflows"},"content":"\n\nSame code, different example can be found here: \n\nhttps://​www​.fatiando​.org​/verde​/latest​/tutorials​/trends​.html\n\ntrend = vd.Trend(degree=1).fit(coordinates, df2.PM25value)\nprint(trend.coef_)\n\ntrend_values = trend.predict(coordinates)\nresiduals = df2.PM25value - trend_values\n\nplt.figure(figsize=(8, 5))\nax = plt.axes(projection=ccrs.PlateCarree())\nax.add_feature(cf.STATES)\n\ngl = ax.gridlines(crs=ccrs.PlateCarree(), draw_labels=True,\n                  linewidth=2, color='gray', alpha=0.35, linestyle='--')\n\ngl.top_labels = False\ngl.ylabels_right = False\n\ngl.xlocator = mticker.FixedLocator([-110, -108,  -106, -104, -102])\n\nmaxabs = vd.maxabs(residuals)\n\n\nplt.scatter(df2.lat, \n            df2.lon, \n            c = residuals,\n            s=50,\n            vmin=-maxabs,\n            vmax=maxabs,\n            cmap=\"bwr\")\n\nplt.colorbar().set_label(\"Residuals\")\nplt.show()\n\nUnlike the Texas example in Verde, hard to see a distinct regional trend.\n\n","type":"content","url":"/notebooks/verde-intro#trend-estimation","position":11},{"hierarchy":{"lvl1":"Introduction to Verde","lvl4":"Data Decimation","lvl2":"Verde Workflows"},"type":"lvl4","url":"/notebooks/verde-intro#data-decimation","position":12},{"hierarchy":{"lvl1":"Introduction to Verde","lvl4":"Data Decimation","lvl2":"Verde Workflows"},"content":"\n\nspacing = 30 / 60 # Play around with this!\n\nreducer = vd.BlockReduce(reduction=np.median, spacing= spacing)\nprint(reducer)\n\nfilter_coords, filter_data = reducer.filter(\n    coordinates=(df2.lat, df2.lon), data=df2.PM25value)\n\nSanity check\n\nnp.shape(filter_coords)[1] == np.size(filter_data)\n\nPlotting the decimated datapoints\n\nplt.figure(figsize=(6, 4))\nplt.plot(*filter_coords, \".k\",  markersize=15, label='Data points')\nplt.legend()\nplt.show()\n\n","type":"content","url":"/notebooks/verde-intro#data-decimation","position":13},{"hierarchy":{"lvl1":"Introduction to Verde","lvl4":"Verde Spline","lvl2":"Verde Workflows"},"type":"lvl4","url":"/notebooks/verde-intro#verde-spline","position":14},{"hierarchy":{"lvl1":"Introduction to Verde","lvl4":"Verde Spline","lvl2":"Verde Workflows"},"content":"\n\nThis turtorial runs though this entire workflow, but with a bathymetery dataset: \n\nhttps://​www​.fatiando​.org​/verde​/latest​/tutorials​/projections​.html\n\nspline = vd.Spline().fit(filter_coords, filter_data)\n\nregion = vd.get_region(filter_coords)\ngrid_coords = vd.grid_coordinates(region, spacing=spacing)\ngrid = spline.grid(coordinates=grid_coords, data_names=\"PM25\")\nprint(grid)\n\ndistance_mask = 1 #this might not make physical sense\ngrid = vd.distance_mask(filter_coords, maxdist=distance_mask, grid=grid)\n\nLet’s make a plot with the gridded and masked output, also shows where the datapoints are:\n\nplt.figure(figsize=(8, 5))\n\npc = grid.PM25.plot.pcolormesh(cmap=\"YlOrBr\", add_colorbar=False)\nplt.colorbar(pc)\nplt.plot(filter_coords[0], filter_coords[1], \".k\", markersize=15, label='Data Points')\n\nplt.title('Gridded PM2.5 Data, Distance Filter: '+str(distance_mask))\n\nplt.xlabel(\"West\", size=15)\nplt.ylabel(\"North\", size=15)\nplt.legend()\nplt.gca().set_aspect(\"equal\")\nplt.tight_layout()\nplt.show()\n\n","type":"content","url":"/notebooks/verde-intro#verde-spline","position":15},{"hierarchy":{"lvl1":"Introduction to Verde","lvl3":"Xarray","lvl2":"Verde Workflows"},"type":"lvl3","url":"/notebooks/verde-intro#xarray","position":16},{"hierarchy":{"lvl1":"Introduction to Verde","lvl3":"Xarray","lvl2":"Verde Workflows"},"content":"\n\nMaking the grid into an xarray dataset is 1 line of code!\n\nds = grid.PM25.to_dataset()\nds\n\nExporting this as a netCDF:\n\nds.to_netcdf('test.nc')\n\n","type":"content","url":"/notebooks/verde-intro#xarray","position":17},{"hierarchy":{"lvl1":"Introduction to Verde","lvl4":"Summary","lvl3":"Xarray","lvl2":"Verde Workflows"},"type":"lvl4","url":"/notebooks/verde-intro#summary","position":18},{"hierarchy":{"lvl1":"Introduction to Verde","lvl4":"Summary","lvl3":"Xarray","lvl2":"Verde Workflows"},"content":"\n\nVerde and xESMF are two different gridding packages, with two different aims. They both work well with xarray!","type":"content","url":"/notebooks/verde-intro#summary","position":19},{"hierarchy":{"lvl1":"xESMF Demo using SEVIER dataset for Machine Learning Preperation"},"type":"lvl1","url":"/notebooks/xesmf-introduction","position":0},{"hierarchy":{"lvl1":"xESMF Demo using SEVIER dataset for Machine Learning Preperation"},"content":"Thomas Martin \n\nSept 2 - 2022\n\n","type":"content","url":"/notebooks/xesmf-introduction","position":1},{"hierarchy":{"lvl1":"xESMF Demo using SEVIER dataset for Machine Learning Preperation","lvl4":"Overview"},"type":"lvl4","url":"/notebooks/xesmf-introduction#overview","position":2},{"hierarchy":{"lvl1":"xESMF Demo using SEVIER dataset for Machine Learning Preperation","lvl4":"Overview"},"content":"\n\nThis is a quick (~20 minute) notebook that will cover how to use xESMF to regrid with xarray on a dataset. This notebooks will heavily borrow from this repo: \n\nhttps://​github​.com​/ai2es​/WAF​_ML​_Tutorial​_Part1 & this paper \n\nhttps://​proceedings​.neurips​.cc​/paper​/2020​/file​/fa78a16157fed00d7a80515818432169​-Paper​.pdf . Randy Chase ( on github) is thanked for dataset prep and previous work!\n\n","type":"content","url":"/notebooks/xesmf-introduction#overview","position":3},{"hierarchy":{"lvl1":"xESMF Demo using SEVIER dataset for Machine Learning Preperation","lvl4":"Prerequisits"},"type":"lvl4","url":"/notebooks/xesmf-introduction#prerequisits","position":4},{"hierarchy":{"lvl1":"xESMF Demo using SEVIER dataset for Machine Learning Preperation","lvl4":"Prerequisits"},"content":"\n\nWorking knowldge of xarray, matplotlib, and numpy is beneficial. This is not designed to be an introduction to any of those packages.\n\n","type":"content","url":"/notebooks/xesmf-introduction#prerequisits","position":5},{"hierarchy":{"lvl1":"xESMF Demo using SEVIER dataset for Machine Learning Preperation","lvl3":"Imports"},"type":"lvl3","url":"/notebooks/xesmf-introduction#imports","position":6},{"hierarchy":{"lvl1":"xESMF Demo using SEVIER dataset for Machine Learning Preperation","lvl3":"Imports"},"content":"\n\nimport numpy as np\nimport xarray as xr\nimport xesmf as xe\n\n# Plotting utilities\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nWatermark is great repo to track versions when sharing work with notebooks. xESMF can be a little tricky to install, highly reccomend to install via conda instread of pip.\n\n%load_ext watermark\n%watermark --iversions\n\n","type":"content","url":"/notebooks/xesmf-introduction#imports","position":7},{"hierarchy":{"lvl1":"xESMF Demo using SEVIER dataset for Machine Learning Preperation","lvl5":"Dataset Load","lvl3":"Imports"},"type":"lvl5","url":"/notebooks/xesmf-introduction#dataset-load","position":8},{"hierarchy":{"lvl1":"xESMF Demo using SEVIER dataset for Machine Learning Preperation","lvl5":"Dataset Load","lvl3":"Imports"},"content":"\n\nfile = '../data/onestorm.nc' # netcdf file\n\n#open an example storm \nds = xr.open_dataset(file)\n#see the data by printing ds. By putting at the bottom of the cell, it is automatically printed\nds\n\nWe will be using this single dataset for the entirety of the notebook\n\nplt.figure(figsize=(9,6))\n#show all x pixels (:) and all y pixels (:) and the first time step, with a Grey colorscale, and the color min 0 and color max 1. \nplt.imshow(ds.visible.isel(t=0)[:,:]*1e-4,cmap='Greys_r',vmin=0,vmax=1) # At timestep 0\n\n#show us the colorbar \nplt.colorbar(label='Visible Reflectance Factor')\n#a function that cleans some of the figure up. \nplt.tight_layout()\n\nLet’s Zoom in one one patch, to gain some intuition on how satellite data is used in Machine Learning (ML)\n\n# Bounds on Zoom box\nxmin = 278\nxmax = 288\n\nymin= 278\nymax= 288\n\nplt.figure(figsize=(10,9))\n#show all x pixels (:) and all y pixels (:) and the first time step, with a blue colorscale, and the color min 0 and color max 1. \n\nsns.heatmap(ds.visible[xmin:xmax,ymin:ymax,0]*1e-4, \n            cmap=\"Blues\", \n            annot=True, \n            annot_kws={\"size\": 11}, # font size\n            vmin=0, \n            vmax=1) \n\nplt.show()\nplt.tight_layout()\n\nLet’s check out a small section of the lightning strike data:\n\nplt.figure(figsize=(6,5))\nsns.heatmap(ds.lightning_flashes.isel(t=0)[3:9,3:9], \n            cmap=\"Blues\", \n            annot=True, \n            annot_kws={\"size\": 11}) # font size\n\nplt.show()\nplt.tight_layout()\n\nAfter reviewing the dataset, some of the variables have different shapes:\n\nprint(ds.visible.shape) # x, y, time\nprint(ds.lightning_flashes.shape) \n\n","type":"content","url":"/notebooks/xesmf-introduction#dataset-load","position":9},{"hierarchy":{"lvl1":"xESMF Demo using SEVIER dataset for Machine Learning Preperation","lvl2":"Using xESMF to regrid an xarray dataset:"},"type":"lvl2","url":"/notebooks/xesmf-introduction#using-xesmf-to-regrid-an-xarray-dataset","position":10},{"hierarchy":{"lvl1":"xESMF Demo using SEVIER dataset for Machine Learning Preperation","lvl2":"Using xESMF to regrid an xarray dataset:"},"content":"\n\nInformation available here: \n\nhttps://​xesmf​.readthedocs​.io​/en​/latest​/notebooks​/Rectilinear​_grid​.html\n\nIn order to re-grid, let’s set up some coordinates. Lets do some sanity checking to check what the axises needs to be divided by:\n\n# Why 47 and not 48? The range for x4 is 0 to 47 (48 steps). If you divide by 48, it will be longer by ~1 in each dimmension\nnp.shape(ds.visible.values)[0]/47 # for both x & y, this number does not need to be an integer \n\nscaling_factor = np.shape(ds.lightning_flashes.values)\n\nds2 = ds.assign_coords(x4=ds.x4, y4=ds.y4, \n                        x=ds.x/16.3404, y=ds.y/16.340425, # make the coordinates match\n                        time=ds.t) # making it a new dataset\nds2\n\n","type":"content","url":"/notebooks/xesmf-introduction#using-xesmf-to-regrid-an-xarray-dataset","position":11},{"hierarchy":{"lvl1":"xESMF Demo using SEVIER dataset for Machine Learning Preperation","lvl3":"Decreasing visible resoultion to lighting resoultion","lvl2":"Using xESMF to regrid an xarray dataset:"},"type":"lvl3","url":"/notebooks/xesmf-introduction#decreasing-visible-resoultion-to-lighting-resoultion","position":12},{"hierarchy":{"lvl1":"xESMF Demo using SEVIER dataset for Machine Learning Preperation","lvl3":"Decreasing visible resoultion to lighting resoultion","lvl2":"Using xESMF to regrid an xarray dataset:"},"content":"\n\n","type":"content","url":"/notebooks/xesmf-introduction#decreasing-visible-resoultion-to-lighting-resoultion","position":13},{"hierarchy":{"lvl1":"xESMF Demo using SEVIER dataset for Machine Learning Preperation","lvl5":"Making new datasets, this might not be required.","lvl3":"Decreasing visible resoultion to lighting resoultion","lvl2":"Using xESMF to regrid an xarray dataset:"},"type":"lvl5","url":"/notebooks/xesmf-introduction#making-new-datasets-this-might-not-be-required","position":14},{"hierarchy":{"lvl1":"xESMF Demo using SEVIER dataset for Machine Learning Preperation","lvl5":"Making new datasets, this might not be required.","lvl3":"Decreasing visible resoultion to lighting resoultion","lvl2":"Using xESMF to regrid an xarray dataset:"},"content":"\n\nds_visible = ds2[\"visible\"].to_dataset()\nds_visible = ds_visible.rename({'x': 'lon','y': 'lat'})\nds_visible\n\nds_lf = ds2[\"lightning_flashes\"].to_dataset()\nds_lf = ds_lf.rename({'x4': 'lon',\n                      'y4': 'lat'})\nds_lf \n\nregridder = xe.Regridder(ds_visible, ds_lf, \"bilinear\")\nregridder  # print basic regridder information.\n\ndr_out = regridder(ds_visible)\ndr_out\n\n","type":"content","url":"/notebooks/xesmf-introduction#making-new-datasets-this-might-not-be-required","position":15},{"hierarchy":{"lvl1":"xESMF Demo using SEVIER dataset for Machine Learning Preperation","lvl4":"Direct Comparison","lvl3":"Decreasing visible resoultion to lighting resoultion","lvl2":"Using xESMF to regrid an xarray dataset:"},"type":"lvl4","url":"/notebooks/xesmf-introduction#direct-comparison","position":16},{"hierarchy":{"lvl1":"xESMF Demo using SEVIER dataset for Machine Learning Preperation","lvl4":"Direct Comparison","lvl3":"Decreasing visible resoultion to lighting resoultion","lvl2":"Using xESMF to regrid an xarray dataset:"},"content":"\n\nNote the difference in x & y axis\n\ntime_step = 0\n\nf, (ax1, ax2) = plt.subplots(1, 2, sharey=False, figsize=(8,8))\n# Original figure\nax1.imshow(ds.visible.isel(t=time_step)[:,:]*1e-4,cmap='Greys_r',vmin=0,vmax=1) # the x and y axis were flipped, added the .T to fix the plot\nax1.title.set_text('Original')\n\nax2.imshow(dr_out.visible.isel(t=time_step)[:,:].T*1e-4,cmap='Greys_r',vmin=0,vmax=1) \nax2.title.set_text('Downscaled - Bilinear')\n\n","type":"content","url":"/notebooks/xesmf-introduction#direct-comparison","position":17},{"hierarchy":{"lvl1":"xESMF Demo using SEVIER dataset for Machine Learning Preperation","lvl3":"We can also upscale low-resoultion data","lvl2":"Using xESMF to regrid an xarray dataset:"},"type":"lvl3","url":"/notebooks/xesmf-introduction#we-can-also-upscale-low-resoultion-data","position":18},{"hierarchy":{"lvl1":"xESMF Demo using SEVIER dataset for Machine Learning Preperation","lvl3":"We can also upscale low-resoultion data","lvl2":"Using xESMF to regrid an xarray dataset:"},"content":"\n\nNote: This is not a reccomendation to do this for every workflow/dataset! There are five different algorithms that you can use, here is a nice comparison: \n\nhttps://​xesmf​.readthedocs​.io​/en​/latest​/notebooks​/Compare​_algorithms​.html\n\nregridder_up_con = xe.Regridder(ds_lf, ds_visible, \"conservative\") #note different method from before\nregridder_up_patch = xe.Regridder(ds_lf, ds_visible, \"patch\") \nregridder_up_patch  # print basic regridder information.\n\nupscaled_lf_con = regridder_up_con(ds_lf)\nupscaled_lf_patch = regridder_up_patch(ds_lf)\n\nf, (ax1, ax2, ax3) = plt.subplots(1, 3, sharey=False, figsize=(10,4))\n\n# Original Dataset\nax1.imshow(ds.lightning_flashes.isel(t=0)[:,:],cmap='GnBu')\nax1.title.set_text('Original')\n\n\nax2.imshow(upscaled_lf_con.lightning_flashes.isel(t=0)[:,:].T, cmap='GnBu')\nax2.title.set_text('Upscaled - Conservative')\n\nax3.imshow(upscaled_lf_patch.lightning_flashes.isel(t=0)[:,:].T, cmap='GnBu')\nax3.title.set_text('Upscaled - Patch')\n\n","type":"content","url":"/notebooks/xesmf-introduction#we-can-also-upscale-low-resoultion-data","position":19},{"hierarchy":{"lvl1":"xESMF Demo using SEVIER dataset for Machine Learning Preperation","lvl2":"Merging Xarray Datasets"},"type":"lvl2","url":"/notebooks/xesmf-introduction#merging-xarray-datasets","position":20},{"hierarchy":{"lvl1":"xESMF Demo using SEVIER dataset for Machine Learning Preperation","lvl2":"Merging Xarray Datasets"},"content":"\n\nAfter you have made a new grid, you will want to combine them into a new xarray dataset for future analysis. Here is an example using combine by coords:\n\nupscaled_lf_patch\n\nds_visible\n\nnew_dataset = xr.combine_by_coords([upscaled_lf_patch, ds_visible])\nnew_dataset\n\n","type":"content","url":"/notebooks/xesmf-introduction#merging-xarray-datasets","position":21},{"hierarchy":{"lvl1":"xESMF Demo using SEVIER dataset for Machine Learning Preperation","lvl3":"Summary","lvl2":"Merging Xarray Datasets"},"type":"lvl3","url":"/notebooks/xesmf-introduction#summary","position":22},{"hierarchy":{"lvl1":"xESMF Demo using SEVIER dataset for Machine Learning Preperation","lvl3":"Summary","lvl2":"Merging Xarray Datasets"},"content":"\n\nThis has been a quick introduction to useing the xESMF regridding tools! The documentation for xESMF & xarray are very helpful for future learning.","type":"content","url":"/notebooks/xesmf-introduction#summary","position":23}]}